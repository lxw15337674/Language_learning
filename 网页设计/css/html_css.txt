css注释代码:在CSS中也有注释语句：用/*注释语句*/来标明（Html中使用<!--注释语句-->)
css样式代码插入分为3种:
		1.内联式:直接写在现有的HTML标签中
				<p style="color:red;font-size:12px">这里文字是红色。</p>
		2.嵌入式:把css样式代码写在<style type="text/css"></style>标签之间
				<style type="text/css">
				span{
				color:red;
				}
				</style>
		3.外部式，写在单独的一个文件中
				<link href="base.css" rel="stylesheet" type="text/css" />
				   注意:1.css样式文件名称以有意义的英文字母命名，如 main.css。
						2、rel="stylesheet" type="text/css" 是固定写法不可修改。
						3、<link>标签位置一般写在<head>标签之内。
		三种样式的优先级：内联式 > 嵌入式 > 外部式
选择器:
	标签选择器:		p{
						font-size:12px;		/*设置文字字号*/
						color:red;			/*设置文字颜色*/
						font-weight:bold;	/*设置字体加粗*/
					}
	类选择器:		语法：
						.类选器名称{css样式代码;}
							注意：
							1、英文圆点开头
							2、其中类选器名称可以任意起名（但不要起中文）
							3.写在<head>标签之内
					使用方法：
						第一步：使用合适的标签把要修饰的内容标记起来，如下：
						<span>胆小如鼠</span>
						第二步：使用class="类选择器名称"为标签设置一个类，如下：
						<span class="stress">胆小如鼠</span>
						第三步：设置类选器css样式，如下：
						.stress{color:red;}/*类前面要加入一个英文圆点*/
	ID选择器:		ID选择器都类似于类选择符，但也有一些区别：
						1、为标签设置id="ID名称"，而不是class="类名称"。
						2、ID选择符的前面是井号（#）号，而不是英文圆点（.）。
		类和ID选择器的区别:
					相同点：可以应用于任何元素
					不同点：1、ID选择器只能在文档中使用一次。与类选择器不同，在一个HTML文档中，ID选择器只能使用一次，而且仅一次。而类选择器可以使用多次。
							2、可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID选择器是不可以的（不能使用 ID 词列表）。
	子选择器:		即大于符号(>),用于选择指定标签元素的第一代子元素。
						.food>li{border:1px solid red;}
	包含(后代)选择器:
					即加入空格,用于选择指定标签元素下的后辈元素
						.first  span{color:red;}
		选择器与子选择器的区别:
					子选择器（child selector）仅是指它的直接后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“>”进行选择。
	通用选择器:
					使用一个（*）号指定，它的作用是匹配html中所有标签元素
						* {color:red;}
	伪类选择符:		
					它允许给html不存在的标签（标签的某种状态）设置样式
						比如给html中一个标签元素的鼠标滑过的状态来设置字体颜色：
							a:hover{color:red;}
	分组选择符:
					当你想为html中多个标签元素设置同一个样式时，可以使用分组选择符（，），
						h1,span{color:red;}
						它相当于下面两行代码：
						h1{color:red;}
						span{color:red;}
	特殊性:				
					显示权值最高的css样式
					标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。例如下面的代码：
							p{color:red;} /*权值为1*/
							p span{color:green;} /*权值为1+1=2*/
							.warning{color:white;} /*权值为10*/
							p span.warning{color:purple;} /*权值为1+1+10=12*/
							#footer .note p{color:yellow;} /*权值为100+10+1=111*/
	层叠:				
					层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。
	重要性:
					我们在做网页代码的时，有些特殊的情况需要为某些样式设置具有最高权值,这时候我们可以使用!important来解决。
							p{color:red!important;}
							p{color:green;}
							<p class="first">三年级时，我还是一个<span>胆小如鼠</span>的小女孩。</p>
格式化排版:
	文本排版--字体,字号、颜色:
					用css样式为网页中的文字设置字体、字号、颜色等样式属性.
							body{font-family:"Microsoft Yahei";font-size:12px;color:#666
						font-family:设置字体；
						font-size:字体大小；
						font-weight:bold：设置为粗体样式；
						font-style:italic：设置为斜体样式；
						text-decoration:underline：文字设置下划线；
						text-decoration:line-through：删除线；
						text-indent:2em：缩进；（注意：2em的意思就是文字的2倍大小。）
						line-height:2em：行高；
						word-spacing:50px：单词间距；
						letter-spacing:20px:字母间距；
						text-align:center：水平居中对齐；
元素分类:
					在CSS中，html中的标签元素大体被分为三种不同的类型：块状元素、内联元素(又叫行内元素)和内联块状元素。
					常用的块状元素有：
					<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form>
					常用的内联元素有：
					<a>、<span>、<br>、<i>、<em>、<strong>、<label>、<q>、<var>、<cite>、<code>
					常用的内联块状元素有：
					<img>、<input>
	块级元素:
					在html中<div>、 <p>、<h1>、<form>、<ul> 和 <li>就是块级元素。设置display:block就是将元素显示为块级元素.
					如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点:
									a{display:block;}
					块级元素特点：
						1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）
						2、元素的高度、宽度、行高以及顶和底边距都可设置。
						3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。
	内联元素:
					在html中，<span>、<a>、<label>、 <strong> 和<em>就是典型的内联元素（行内元素）（inline）元素。
					当然块状元素也可以通过代码display:inline将元素设置为内联元素。如下代码就是将块状元素div转换为内联元素，从而使 div 元素具有内联元素特点。
									div{
										 display:inline;
									 }
									<div>我要变成内联元素</div>
					内联元素特点：
						1、和其他元素都在一行上；
						2、元素的高度、宽度及顶部和底部边距不可设置；
						3、元素的宽度就是它包含的文字或图片的宽度，不可改变。
	内联块状元素:
					内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码display:inline-block就是将元素设置为内联块状元素。(css2.1新增)，<img>、<input>标签就是这种内联块状标签。
					inline-block 元素特点：
						1、和其他元素都在一行上；
						2、元素的高度、宽度、行高以及顶和底边距都可设置。
盒模型
	边框:			盒子模型的边框就是围绕着内容及补白的线，这条线你可以设置它的粗细、样式和颜色(边框三个属性)。
						如下面代码为 div 来设置边框粗细为 2px、样式为实心的、颜色为红色的边框：
							div{
								border:2px  solid  red;
							}
							上面是 border 代码的缩写形式，可以分开写：
							div{
								border-width:2px;
								border-style:solid;
								border-color:red;
							}
						注意：
							1、border-style（边框样式）常见样式有：
							dashed（虚线）| dotted（点线）| solid（实线）。
							2、border-color（边框颜色）中的颜色可设置为十六进制颜色，如:
							border-color:#888;//前面的井号不要忘掉。
							3、border-width（边框宽度）中的宽度也可以设置为：
							thin | medium | thick（但不是很常用），最常还是用象素（px）
						如果有想为 p 标签单独设置下边框，而其它三边都不设置边框样式,css 样式中允许只为一个方向的边框设置样式：
							div{border-bottom:1px solid red;}
	宽度和高度:
					css内定义的宽（width）和高（height），指的是填充以里的内容范围。
					因此一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界						
					元素的高度也是同理。
						比如：
						css代码：
						div{
							width:200px;
							padding:20px;
							border:1px solid red;
							margin:10px;    
						}
						html代码：
						<body>
						   <div>文本内容</div>
						</body>
						元素的实际长度为：10px+1px+20px+200px+20px+1px+10px=262px。
	填充:
					元素内容与边框之间是可以设置距离的，称之为“填充”。填充也可分为上、右、下、左(顺时针)。
						如下代码：
							div{padding:20px 10px 15px 30px;}
							顺序一定不要搞混。
						如果上、右、下、左的填充都为10px;可以这么写
						div{padding:10px;}
						如果上下填充一样为10px，左右一样为20px，可以这么写：
						div{padding:10px 20px;}
	边界:
					元素与其它元素之间的距离可以使用边界（margin）来设置。
				总结：padding和margin的区别，padding在边框里，margin在边框外。
css布局模型:
					CSS包含3种基本的布局模型，用英文概括为：Flow、Layer 和 Float。
					在网页中，元素有三种布局模型：
					1、流动模型（Flow）
					2、浮动模型 (Float)
					3、层模型（Layer）
	流动模型:
					流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML 网页元素都是根据流动模型来分布网页内容的。
					流动布局模型具有2个比较典型的特征：
						1.块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。
						2.在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）
	浮动模型:				
					如果现在我们想让两个块状元素并排显示,设置元素浮动就可以实现.
						任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，如 div、p、table、img 等元素都可以被定义为浮动。如下代码可以实现两个 div 元素一行显示。
	层模型:			
					CSS定义了一组定位（positioning）属性来支持层布局模型。
					层模型有三种形式：
						1、绝对定位(position: absolute)
						2、相对定位(position: relative)
						3、固定定位(position: fixed)
							绝对定位:
								如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。
							相对定位:
								如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。
							固定定位:
								fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed?属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。
							三种定位方式position
							absolute绝对定位:让它去哪就去哪
							relative相对定位:人走了,但是心还在那里.
							fixed固定定位: 不管水怎么流,船还是被栓在那里.在浏览器中的位置是固定的，不会因浏览器中的滚动条滚动而变化。(浮动报名框，电商网站的导航等，可能就是这个属性做的，和滚动内容，背景图不变原理相似)	
简写:
	盒模型代码:
					盒模型时外边距(margin)、内边距(padding)和边框(border)设置上下左右四个方向的边距是按照顺时针方向设置的：上右下左。具体应用在margin和padding的例子如下：
							margin:10px 15px 12px 14px;/*上设置为10px、右设置为15px、下设置为12px、左设置为14px*/
							通常有下面三种缩写方法:
							1、如果top、right、bottom、left的值相同，如下面代码：
							margin:10px 10px 10px 10px;
							可缩写为：
							margin:10px;
							2、如果top和bottom值相同、left和 right的值相同，如下面代码：
							margin:10px 20px 10px 20px;
							可缩写为：
							margin:10px 20px;
							3、如果left和right的值相同，如下面代码：
							margin:10px 20px 30px 20px;
							可缩写为：
							margin:10px 20px 30px;
							注意：padding、border的缩写方法和margin是一致的。
	颜色值缩写:	
					关于颜色的css样式也是可以缩写的，当你设置的颜色是16进制的色彩值时，如果每两位的值相同，可以缩写一半。
							例子1：
							p{color:#000000;}
							可以缩写为：
							p{color: #000;}
							例子2：
							p{color: #336699;}
							可以缩写为：
							p{color: #369;}
	字体缩写:
					网页中的字体css样式代码也有他自己的缩写方式，下面是给网页设置字体的代码：
						body{
							font-style:italic;
							font-variant:small-caps; 
							font-weight:bold; 
							font-size:12px; 
							line-height:1.5em; 
							font-family:"宋体",sans-serif;
						}
						这么多行的代码其实可以缩写为一句：
						body{
							font:italic  small-caps  bold  12px/1.5em  "宋体",sans-serif;
						}
						注意：
						1、使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-varient、line-height)如未指定将自动使用默认值。
						2、在缩写时 font-size 与 line-height 中间要加入“/”斜扛。
						一般情况下因为对于中文网站，英文还是比较少的，所以下面缩写代码比较常用：
						body{
							font:12px/1.5em  "宋体",sans-serif;
						}
						只是有字号、行间距、中文字体、英文字体设置。
颜色值:
					在网页中的颜色设置是非常重要，有字体颜色（color）、背景颜色（background-color）、边框颜色（border）等，设置颜色的方法也有很多种：
						1、英文命令颜色
						p{color:red;}
						2、RGB颜色
						这个与 photoshop 中的 RGB 颜色是一致的，由 R(red)、G(green)、B(blue) 三种颜色的比例来配色。
						p{color:rgb(133,45,200);}
						每一项的值可以是 0~255 之间的整数，也可以是 0%~100% 的百分数。如：
						p{color:rgb(20%,33%,25%);}
						3、十六进制颜色
						这种颜色设置方法是现在比较普遍使用的方法，其原理其实也是 RGB 设置，但是其每一项的值由 0-255 变成了十六进制 00-ff。
						p{color:#00ffff;}
长度值:
					长度单位总结一下，目前比较常用到px（像素）、em、% 百分比，要注意其实这三种单位都是相对单位。
						1、像素
						像素为什么是相对单位呢？因为像素指的是显示器上的小点（CSS规范中假设“90像素=1英寸”）。实际情况是浏览器会使用显示器的实际像素值有关，在目前大多数的设计者都倾向于使用像素（px）作为单位。
						2、em
						就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。如下代码：
						p{font-size:12px;text-indent:2em;}
						上面代码就是可以实现段落首行缩进 24px（也就是两个字体大小的距离）。
						下面注意一个特殊情况：
						但当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。如下代码：
						html:
						<p>以这个<span>例子</span>为例。</p>
						css:
						p{font-size:14px}
						span{font-size:0.8em;}
						结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。
						3、百分比
						p{font-size:12px;line-height:130%}
						设置行高（行间距）为字体的130%（12 * 1.3 = 15.6px）。
水平居中设置
	行内元素:
					水平居中是通过给父元素设置 text-align:center 来实现的。
							html代码：
								<body>
								  <div class="txtCenter">我想要在父容器中水平居中显示。</div>
								</body>
							css代码：
								<style>
								  .txtCenter{
									text-align:center;
								  }
								</style>
	定宽块状元素:	
					当被设置元素为块状元素时用 text-align：center 就不起作用了,这时也分两种情况：定宽块状元素和不定宽块状元素
						1.定宽块状元素：块状元素的宽度width为固定值.
								满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的.
								html代码：
									<body>
									  <div>我是定宽块状元素，哈哈，我要水平居中显示。</div>
									</body>
								css代码：
									<style>
									div{
										border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/
										
										width:200px;/*定宽*/
										margin:20px auto;/* margin-left 与 margin-right 设置为 auto */
									}
									</style>
									也可以写成：
									margin-left:auto;
									margin-right:auto;
									注意：元素的“上下 margin” 是可以随意设置的。


					